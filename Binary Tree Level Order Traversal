# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:
        
        #usind quece techniq (FIFO)
        if not root:
            return
        
        res = []
        que = []
        
        que.append(root)
        
        currentList = []
        
        
        while que:
            currentSize = len(que)
            
            while currentSize > 0:
                node = que[0]
                que.pop(0) #popleft
                currentList.append(node.val)
                currentSize -= 1
            
                if node.left:
                    que.append(node.left)
                if node.right:
                    que.append(node.right)
                
            res.append(currentList)
            currentList = []
            
        return res
        
        
        
        
        
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:
        
        result = []
        
        def recursive(rt,lvl,res):
            
            if not rt:
                return 
            
            if len(res) < lvl+1:
                res.append([])
            
            res[lvl].append(rt.val)
            
            recursive( rt.left, lvl+1, res)
            recursive( rt.right, lvl+1, res)
          
        recursive(root,0,result)
    
        return result
