# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right


class Solution:
    def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        #iteratively
        res = []
        st = []
        node = root
        while node or st:
            while node:
                
                st.append(node)
                node = node.left
                
            node = st[-1]
            res.append(node.val)
            
            node = node.right
        return res
                
                
                
                
                
                
                

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
#Recursive version

class Solution:
    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        
        res = []
        
        def rec(rt):
            if not rt:
                return
            rec(rt.left)
            res.append(rt.val)
            rec(rt.right)
        
        rec(root)
        
        return res
